# -*- coding: utf-8 -*-
"""noise_reduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OUcQYLEQwH4G67EZOAdtZ9swzTbfsTBD
"""

import struct as st
import numpy as np               
                  
MNIST = {'MY_IMGS':'train-images.idx3-ubyte'}
train_imagesfile = open(MNIST['MY_IMGS'],'rb')
train_imagesfile.seek(0)
magic = st.unpack('>4B',train_imagesfile.read(4))
number_of_images,number_of_rows,number_of_columns=st.unpack('>III',train_imagesfile.read(12))
temp=np.asarray(st.unpack('>'+(number_of_images*number_of_rows*number_of_columns)*'B',train_imagesfile.read(number_of_images*number_of_rows*number_of_columns)))
images_array=temp.reshape(number_of_images,number_of_rows,number_of_columns)

print(images_array)

import numpy as np
import glob 
mean = 0
var = 10
sigma = var ** 0.5
gaussian = np.random.normal(mean, sigma, (28, 28))

noisy_arr=[]  

for i in range(0,len(images_array)):
  img =(images_array[i])
  noisy_image = np.zeros(img.shape, np.float32)
  noisy_image=img + gaussian
  noisy_arr.append(noisy_image)

noisy_arr=np.array(noisy_arr)

import numpy as np

R1=[]
for img in noisy_arr:
  temp=np.array(img.flatten())
  R1.append(temp)

#flattend image array
R1=np.array(R1)


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(R1)

std_data=(scaler.transform(R1))

y=(std_data[5].reshape(28,28))
import matplotlib.pyplot as plt
plt.imshow(y[:,:], cmap='gray')
plt.show()

import numpy as np
from scipy.linalg import eigh
covariance_matrix = np.cov(std_data.T)


##For P dimensional reduction####
values, vectors = eigh(covariance_matrix)#,eigvals=(782,783)
values=np.flipud(values)


import matplotlib.pyplot as plt 
  
#Temp=[]
#for i in range(0,729):
#  Temp.append(vectors[i]) 

#Temp=np.array(Temp)
vectors=vectors.T
vectors=np.flipud(vectors)

print(len(vectors))
print(len(vectors[0]))
print(vectors)

vect_upd=[]
for i in range(0,458):
  vect_upd.append(vectors[i])
  #tty=vectors[i][0]
  
vect_upd=np.array(vect_upd)

print(len(vect_upd))

#print(len(vect_upd[0]))

#vect_upd=vect_upd.T

projected_X = np.matmul(vect_upd,std_data.T)

tem1=np.matmul(vect_upd.T,vect_upd)
tem2=np.linalg.pinv(tem1.T)
tem3=np.matmul(tem2,vect_upd.T)
tem4=np.matmul(tem3,projected_X)
v0=[]
for i in range(0,len(tem4)):
  v0.append(tem4[i][4])

v0=np.array(v0)

import numpy as np

R=[]
for img in images_array:
  temp=np.array(img.flatten())
  R.append(temp)

#flattend image array
R=np.array(R)


y=(R[4].reshape(28,28))



import matplotlib.pyplot as plt
plt.imshow(y[:,:], cmap='gray')
plt.show()

y=(std_data[4].reshape(28,28))
import matplotlib.pyplot as plt
plt.imshow(y[:,:], cmap='gray')
plt.show()



y=(v0.reshape(28,28))

import matplotlib.pyplot as plt
plt.imshow(y[:,:], cmap='gray')
plt.show()