# -*- coding: utf-8 -*-
"""A5_MT19133_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14MZVZOMr5ThsCChB0mPl4voR1HbpfGhF
"""

#######Special Credits for developing the code : AV Sir's lecture material ###########

import pandas as pd
import numpy as np
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
from matplotlib import pyplot as plt


data = [[0, -45], [2,-58], [4,-36],[6,-59],[8,-36],[10,-55],[11,-64]] 
  
Train = pd.DataFrame(data, columns = ['Distance', 'Strength']) 

data1=[[1,-51],[3,-63],[5,-52],[7,-62],[9,-43]]
Test = pd.DataFrame(data1, columns = ['Distance', 'Strength']) 


kernel = C(1.0, (1e-10, 1e10))* RBF(2, (1e-4, 1e4)) 
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=10,random_state=2)
#print(gp)
gp.fit((np.array(Train["Distance"])).reshape(-1, 1),Train["Strength"] )
y_pred, sigma = gp.predict((np.array(Test["Distance"])).reshape(-1, 1), return_std=True)


for i in range(0,len(y_pred)):
  print("Distance",Test["Distance"][i])
  print("Actual value of Signal Strength",Test["Strength"][i])
  print("predicted mean of Signal Strength",y_pred[i] )
  print("variance",sigma[i])
  print("\n")
#print(Test["Strength"])

X=(Train["Distance"])
y=Train["Strength"]
x=Test["Distance"]
plt.figure()
plt.plot(x,Test["Strength"],label='Actual')
#plt.plot(X, y)
plt.plot(x, y_pred, 'b-', label='Prediction')
plt.fill(np.concatenate([x, x[::-1]]),np.concatenate([y_pred - 1.9600 * sigma,(y_pred + 1.9600 * sigma)[::-1]]), alpha=.5, fc='b', ec='None', label='95% confidence interval')
plt.xlabel("Test Points")
plt.ylabel("Test Points outcomes & predictions")

plt.legend(loc='upper left')


plt.show()