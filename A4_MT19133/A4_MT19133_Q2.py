# -*- coding: utf-8 -*-
"""SML_A4_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vcgc8x1-Yn1tDxgxVZH4sF9dYfaUxZOW
"""

import pandas as pd

data=pd.read_csv("data.csv")
print(data)

import numpy as np
X=pd.DataFrame(data["X"])
Y=pd.DataFrame(data["Y"])

X["ones"]=1
X=X.T

print(X.shape)
print(Y.shape)

import math
#yTrain1=pd.DataFrame(yTrain)  
#myTrain1=xTrain[12:14]
#print(myTrain1)
E=[]
myTrain1=X.transpose()
for i in range(0,5):
  xTrainValid=pd.DataFrame()
  yTrainValid=pd.DataFrame()
  xTestValid=pd.DataFrame()
  yTestValid=pd.DataFrame()

  if i == 0:
    t1=0
    t2=40
  else:
    t1=t2
    t2=t1+40
  xTestValid=myTrain1[t1:t2]
  yTestValid=Y[t1:t2]

  for j in range(0,200):
    if not(j>=t1 and j < t2):
      xTrainValid=xTrainValid.append(myTrain1.iloc[j])
      yTrainValid=yTrainValid.append(Y.iloc[j])
  

  xTrain1=xTrainValid.transpose()

  Temp=np.linalg.pinv(np.dot(xTrain1,xTrain1.transpose()))
  Temp1=np.dot(xTrain1,yTrainValid)
  w=Temp.dot(Temp1)


  w=w.T
  y_estimated=np.dot(w,xTestValid.transpose())
  #print(yTrain)
  #print(y_estimated)
  yTestValid=yTestValid.to_numpy()
  y_estimated=y_estimated.T
  MSE=0
  for i in range(0,len(yTestValid)):
    MSE=MSE+((yTestValid[i]-y_estimated[i])**2) 

  MSE=math.sqrt(MSE/len(yTestValid))
  print(MSE)
  E.append(MSE)

E_avg=sum(E)/len(E)

print("E_avg",E_avg)

import math
  
Validation=[]
Training=[]
F=[]
for Deg in range(1,25):
  yTrain1=pd.DataFrame(Y)  
  myTrain1=X
  myTrain1=list(myTrain1.iloc[0])

  df=pd.DataFrame()
  for d in range(Deg,-1,-1):
    l=(np.array(myTrain1)**d)
    df=df.append(pd.DataFrame(l).T)

  #print(type(df))
  myTrain1=df
  #print(myTrain1)

  #print(myTrain1)
  E=[]
  E1=[]
  myTrain1=myTrain1.transpose()
  for i in range(0,5):
    xTrainValid=pd.DataFrame()
    yTrainValid=pd.DataFrame()
    xTestValid=pd.DataFrame()
    yTestValid=pd.DataFrame()

    if i == 0:
      t1=0
      t2=40
    else:
      t1=t2
      t2=t1+40
    xTestValid=myTrain1[t1:t2]
    yTestValid=yTrain1[t1:t2]

    for j in range(0,200):
      if not(j>=t1 and j < t2):
        xTrainValid=xTrainValid.append(pd.DataFrame(myTrain1.iloc[j]).transpose())
        #print(xTrainValid)
        #yTrainValid=yTrainValid.append(pd.DataFrame(yTrain1.iloc[j]).transpose())
        #xTrainValid=xTrainValid.append(myTrain1.iloc[j])
        yTrainValid=yTrainValid.append(yTrain1.iloc[j])
    

    xTrain1=xTrainValid.transpose()

    Temp=np.linalg.pinv(np.dot(xTrain1,xTrain1.transpose()))
    Temp1=np.dot(xTrain1,yTrainValid)
    w=Temp.dot(Temp1)


    w=w.T
    y_estimated=np.dot(w,xTestValid.transpose())
    #print(yTrain)
    #print(y_estimated)
    yTestValid=yTestValid.to_numpy()
    y_estimated=y_estimated.T
    if Deg==10:
      F.append(y_estimated)
    MSE=0
    for i in range(0,len(yTestValid)):
      MSE=MSE+((yTestValid[i]-y_estimated[i])**2) 

    MSE=math.sqrt(MSE/len(yTestValid))
    #print(MSE)
    E.append(MSE)

    ############################### # 
    y_estimated1=np.dot(w,xTrainValid.transpose())
    yTrainValid=yTrainValid.to_numpy()
    y_estimated1=y_estimated1.T
    MSE=0
    for i in range(0,len(yTrainValid)):
      MSE=MSE+((yTrainValid[i]-y_estimated1[i])**2) 

    MSE=math.sqrt(MSE/len(yTrainValid))
    #print(MSE)
    E1.append(MSE)




  E_avg=sum(E)/len(E)
  print(Deg)
  print("E_avg_k_cross_fold",E_avg)
  Validation.append(E_avg)
  
  E_avg1=sum(E1)/len(E1)
  
  print("E_train",E_avg1)
  Training.append(E_avg1)

import matplotlib.pyplot as plt 
x1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] 
plt.plot(x1, Training, label = "Training Error") 
 
x2 = [1,2,3,4,5,6,7,8,9]  
#y2 = [1.2223019920200144,2.365975415105023,3.412862287925112,4.0058230973983235] 
plt.plot(x1, Validation, label = "Validation Error") 
  
plt.xlabel("Degree") 
plt.ylabel('Error') 
#plt.title('Two lines on same graph!') 
  
plt.legend() 

plt.show()

for o in [1,2,4,5,10,15,30]:  
  yTrain1=pd.DataFrame(data["Y"])  
  myTrain1=(pd.DataFrame(data["X"]).transpose())
  myTrain1=list(myTrain1.iloc[0])
  df=pd.DataFrame()
  for d in range(o,-1,-1):
    l=(np.array(myTrain1)**d)
    df=df.append(pd.DataFrame(l).T)

  myTrain1=df
  print(myTrain1.shape)
  Temp=np.linalg.pinv(np.dot(myTrain1,myTrain1.transpose()))
  Temp1=np.dot(myTrain1,yTrain1)
  w=Temp.dot(Temp1)

  w=w.T
  y_estimated=np.dot(w,myTrain1)
    #print((y_estimated[0]))
  import matplotlib.pyplot as plt 

  plt.figure()
    #plt.figure(figsize=(30, 8))
  X1=pd.DataFrame(data["X"])
  Y1=pd.DataFrame(data["Y"])

  plt.scatter(X1,Y1,c='black')
  plt.scatter(X1,y_estimated.transpose(),color='red', marker='.')
  plt.show()

